
Traffic_Light_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ac2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000ac2  00000b56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800062  00800062  00000b58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000147a  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c0  00000000  00000000  0000215e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a45  00000000  00000000  00002a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00003464  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004eb  00000000  00000000  000036a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088f  00000000  00000000  00003b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  0000441a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 1b 02 	jmp	0x436	; 0x436 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b1 02 	call	0x562	; 0x562 <main>
  8a:	0c 94 5f 05 	jmp	0xabe	; 0xabe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <App_init>:


void App_init()
{
	//Pedestrian Led
	LED_init(PORT_B,Led_p_G );
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	82 e4       	ldi	r24, 0x42	; 66
  96:	0e 94 2d 02 	call	0x45a	; 0x45a <LED_init>
	LED_init(PORT_B,Led_p_Y );
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	82 e4       	ldi	r24, 0x42	; 66
  9e:	0e 94 2d 02 	call	0x45a	; 0x45a <LED_init>
	LED_init(PORT_B,Led_p_R );
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	82 e4       	ldi	r24, 0x42	; 66
  a6:	0e 94 2d 02 	call	0x45a	; 0x45a <LED_init>
	// Car Led
	LED_init(PORT_A,Led_C_G );
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	81 e4       	ldi	r24, 0x41	; 65
  ae:	0e 94 2d 02 	call	0x45a	; 0x45a <LED_init>
	LED_init(PORT_A,Led_C_Y );
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	81 e4       	ldi	r24, 0x41	; 65
  b6:	0e 94 2d 02 	call	0x45a	; 0x45a <LED_init>
	LED_init(PORT_A,Led_C_R );
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	81 e4       	ldi	r24, 0x41	; 65
  be:	0e 94 2d 02 	call	0x45a	; 0x45a <LED_init>
	// Button
	Button_init(PORT_D,INT0_PIN);
  c2:	62 e0       	ldi	r22, 0x02	; 2
  c4:	84 e4       	ldi	r24, 0x44	; 68
  c6:	0e 94 27 02 	call	0x44e	; 0x44e <Button_init>
	//Timer
	Timer_init();
  ca:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <Timer_init>
	//Enable global interrupt --> set bin 7 in the status register to be 1.
	sei();
  ce:	78 94       	sei
	//Chose the external interrupt sense - sense on rising edge.
	MCUCR |=(1<<ISC00) | (1<<ISC01);
  d0:	85 b7       	in	r24, 0x35	; 53
  d2:	83 60       	ori	r24, 0x03	; 3
  d4:	85 bf       	out	0x35, r24	; 53
	//Enable external interrupt 0 - INT0.
	//General Interrupt Flag Register
	GICR |= (1 << INT0);
  d6:	8b b7       	in	r24, 0x3b	; 59
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	8b bf       	out	0x3b, r24	; 59
  dc:	08 95       	ret

000000de <App>:
uint8_t C_LED = Green; 
uint8_t PRE_C_LED= Yellow;
uint16_t count=0;
uint32_t test=0;
void App()
{
  de:	ef 92       	push	r14
  e0:	ff 92       	push	r15
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
	//Testing mode
	if (!Mode && test == 0)
  e6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Mode>
  ea:	81 11       	cpse	r24, r1
  ec:	5c c0       	rjmp	.+184    	; 0x1a6 <App+0xc8>
  ee:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  f2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
  f6:	89 2b       	or	r24, r25
  f8:	09 f0       	breq	.+2      	; 0xfc <App+0x1e>
  fa:	55 c0       	rjmp	.+170    	; 0x1a6 <App+0xc8>
	{
		test = LED_init(PORT_A,Led_C_G);
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	81 e4       	ldi	r24, 0x41	; 65
 100:	0e 94 2d 02 	call	0x45a	; 0x45a <LED_init>
 104:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 108:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		test += LED_on(PORT_A,Led_C_G);
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	81 e4       	ldi	r24, 0x41	; 65
 110:	0e 94 37 02 	call	0x46e	; 0x46e <LED_on>
 114:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__data_end>
 118:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__data_end+0x1>
 11c:	82 0f       	add	r24, r18
 11e:	93 1f       	adc	r25, r19
 120:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 124:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		Timer_delay(1000);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	8a e7       	ldi	r24, 0x7A	; 122
 12e:	94 e4       	ldi	r25, 0x44	; 68
 130:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Timer_delay>
		test +=LED_off(PORT_A,Led_C_G);
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	81 e4       	ldi	r24, 0x41	; 65
 138:	0e 94 41 02 	call	0x482	; 0x482 <LED_off>
 13c:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__data_end>
 140:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__data_end+0x1>
 144:	82 0f       	add	r24, r18
 146:	93 1f       	adc	r25, r19
 148:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 14c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		Timer_delay(1000);
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	8a e7       	ldi	r24, 0x7A	; 122
 156:	94 e4       	ldi	r25, 0x44	; 68
 158:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Timer_delay>
		test +=LED_toggle(PORT_A,Led_C_G);
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	81 e4       	ldi	r24, 0x41	; 65
 160:	0e 94 4b 02 	call	0x496	; 0x496 <LED_toggle>
 164:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__data_end>
 168:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__data_end+0x1>
 16c:	82 0f       	add	r24, r18
 16e:	93 1f       	adc	r25, r19
 170:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 174:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		test +=Button_init(PORT_D,INT0_PIN);
 178:	62 e0       	ldi	r22, 0x02	; 2
 17a:	84 e4       	ldi	r24, 0x44	; 68
 17c:	0e 94 27 02 	call	0x44e	; 0x44e <Button_init>
 180:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__data_end>
 184:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__data_end+0x1>
 188:	82 0f       	add	r24, r18
 18a:	93 1f       	adc	r25, r19
 18c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 190:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		Timer_delay(1000);
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	8a e7       	ldi	r24, 0x7A	; 122
 19a:	94 e4       	ldi	r25, 0x44	; 68
 19c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Timer_delay>
		Mode = N_Mode;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Mode>
	}
	// If the car led is Red with interrupt.
	if (test == 5)
 1a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1aa:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 1ae:	05 97       	sbiw	r24, 0x05	; 5
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <App+0xd6>
 1b2:	38 c1       	rjmp	.+624    	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
	{
	
	if (!Mode && C_LED == Red)
 1b4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Mode>
 1b8:	81 11       	cpse	r24, r1
 1ba:	49 c0       	rjmp	.+146    	; 0x24e <App+0x170>
 1bc:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <C_LED>
 1c0:	92 30       	cpi	r25, 0x02	; 2
 1c2:	09 f0       	breq	.+2      	; 0x1c6 <App+0xe8>
 1c4:	44 c0       	rjmp	.+136    	; 0x24e <App+0x170>
	{
		//turn on the ped green led and car red led
		LED_on(PORT_B,Led_p_G);
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	82 e4       	ldi	r24, 0x42	; 66
 1ca:	0e 94 37 02 	call	0x46e	; 0x46e <LED_on>
		LED_on(PORT_A,Led_C_R);
 1ce:	62 e0       	ldi	r22, 0x02	; 2
 1d0:	81 e4       	ldi	r24, 0x41	; 65
 1d2:	0e 94 37 02 	call	0x46e	; 0x46e <LED_on>
		//turn off other leds
		LED_off(PORT_B,Led_p_Y);
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	82 e4       	ldi	r24, 0x42	; 66
 1da:	0e 94 41 02 	call	0x482	; 0x482 <LED_off>
		LED_off(PORT_B,Led_p_R);
 1de:	62 e0       	ldi	r22, 0x02	; 2
 1e0:	82 e4       	ldi	r24, 0x42	; 66
 1e2:	0e 94 41 02 	call	0x482	; 0x482 <LED_off>
		LED_off(PORT_A,Led_C_G);
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	81 e4       	ldi	r24, 0x41	; 65
 1ea:	0e 94 41 02 	call	0x482	; 0x482 <LED_off>
		LED_off(PORT_A,Led_C_Y);
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	81 e4       	ldi	r24, 0x41	; 65
 1f2:	0e 94 41 02 	call	0x482	; 0x482 <LED_off>
		
		Timer_delay(5000);//5 sec delay
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	70 e4       	ldi	r23, 0x40	; 64
 1fa:	8c e9       	ldi	r24, 0x9C	; 156
 1fc:	95 e4       	ldi	r25, 0x45	; 69
 1fe:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Timer_delay>
		//turn off the ped green led and car red led after 5 SEC
		LED_off(PORT_B,Led_p_G);
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	82 e4       	ldi	r24, 0x42	; 66
 206:	0e 94 41 02 	call	0x482	; 0x482 <LED_off>
		LED_off(PORT_A,Led_C_R);
 20a:	62 e0       	ldi	r22, 0x02	; 2
 20c:	81 e4       	ldi	r24, 0x41	; 65
 20e:	0e 94 41 02 	call	0x482	; 0x482 <LED_off>
		//Blinking yellow leds
		LED_BlinkD(PORT_A,Led_C_Y,PORT_B,Led_p_Y,500);
 212:	e1 2c       	mov	r14, r1
 214:	f1 2c       	mov	r15, r1
 216:	0a ef       	ldi	r16, 0xFA	; 250
 218:	13 e4       	ldi	r17, 0x43	; 67
 21a:	21 e0       	ldi	r18, 0x01	; 1
 21c:	42 e4       	ldi	r20, 0x42	; 66
 21e:	61 e0       	ldi	r22, 0x01	; 1
 220:	81 e4       	ldi	r24, 0x41	; 65
 222:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LED_BlinkD>
		//turn of yellow leds and turn on ped red led
		LED_off(PORT_A,Led_C_Y);
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	81 e4       	ldi	r24, 0x41	; 65
 22a:	0e 94 41 02 	call	0x482	; 0x482 <LED_off>
		LED_off(PORT_B,Led_p_Y);
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	82 e4       	ldi	r24, 0x42	; 66
 232:	0e 94 41 02 	call	0x482	; 0x482 <LED_off>
		LED_on(PORT_B,Led_p_R);
 236:	62 e0       	ldi	r22, 0x02	; 2
 238:	82 e4       	ldi	r24, 0x42	; 66
 23a:	0e 94 37 02 	call	0x46e	; 0x46e <LED_on>
		// Set the values to start normally again
		C_LED=Green;
 23e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <C_LED>
		PRE_C_LED=Yellow;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		Mode=N_Mode;
 248:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Mode>
 24c:	ef c0       	rjmp	.+478    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
	
	
		else
		{
			// Check the Interrupt
			if (!Mode)
 24e:	81 11       	cpse	r24, r1
 250:	03 c0       	rjmp	.+6      	; 0x258 <App+0x17a>
			{
				C_LED = Yellow; 
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <C_LED>
			}
			// Close the pedestrian leds in normal case
			LED_off(PORT_B , Led_p_G);
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	82 e4       	ldi	r24, 0x42	; 66
 25c:	0e 94 41 02 	call	0x482	; 0x482 <LED_off>
			LED_off(PORT_B , Led_p_Y);
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	82 e4       	ldi	r24, 0x42	; 66
 264:	0e 94 41 02 	call	0x482	; 0x482 <LED_off>
			LED_off(PORT_B , Led_p_R);
 268:	62 e0       	ldi	r22, 0x02	; 2
 26a:	82 e4       	ldi	r24, 0x42	; 66
 26c:	0e 94 41 02 	call	0x482	; 0x482 <LED_off>
			
			switch(C_LED)
 270:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <C_LED>
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	a9 f1       	breq	.+106    	; 0x2e2 <App+0x204>
 278:	20 f0       	brcs	.+8      	; 0x282 <App+0x1a4>
 27a:	82 30       	cpi	r24, 0x02	; 2
 27c:	09 f4       	brne	.+2      	; 0x280 <App+0x1a2>
 27e:	9a c0       	rjmp	.+308    	; 0x3b4 <App+0x2d6>
 280:	ca c0       	rjmp	.+404    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
			{
				//***************************************Green case****************************************/
				case Green:
				LED_on(PORT_A , Led_C_G);
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	81 e4       	ldi	r24, 0x41	; 65
 286:	0e 94 37 02 	call	0x46e	; 0x46e <LED_on>
				LED_off(PORT_A , Led_C_Y);
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	81 e4       	ldi	r24, 0x41	; 65
 28e:	0e 94 41 02 	call	0x482	; 0x482 <LED_off>
				LED_off(PORT_A , Led_C_R);
 292:	62 e0       	ldi	r22, 0x02	; 2
 294:	81 e4       	ldi	r24, 0x41	; 65
 296:	0e 94 41 02 	call	0x482	; 0x482 <LED_off>
				//delay 5000 ms 
				for (count = 0 ; count < 5 ; count++)
 29a:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <count+0x1>
 29e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <count>
 2a2:	13 c0       	rjmp	.+38     	; 0x2ca <App+0x1ec>
				{
					Timer_delay(1000);
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	8a e7       	ldi	r24, 0x7A	; 122
 2aa:	94 e4       	ldi	r25, 0x44	; 68
 2ac:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Timer_delay>
					if (!Mode)
 2b0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Mode>
 2b4:	88 23       	and	r24, r24
 2b6:	79 f0       	breq	.+30     	; 0x2d6 <App+0x1f8>
				case Green:
				LED_on(PORT_A , Led_C_G);
				LED_off(PORT_A , Led_C_Y);
				LED_off(PORT_A , Led_C_R);
				//delay 5000 ms 
				for (count = 0 ; count < 5 ; count++)
 2b8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <count>
 2bc:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <count+0x1>
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <count+0x1>
 2c6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <count>
 2ca:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <count>
 2ce:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <count+0x1>
 2d2:	05 97       	sbiw	r24, 0x05	; 5
 2d4:	38 f3       	brcs	.-50     	; 0x2a4 <App+0x1c6>
					if (!Mode)
					{
						break;
					}
				}
				C_LED = Yellow; 
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <C_LED>
				PRE_C_LED = Green;
 2dc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
 2e0:	a5 c0       	rjmp	.+330    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
				//***************************************Yellow case****************************************/
				case Yellow:
				
				if (!Mode)
 2e2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Mode>
 2e6:	81 11       	cpse	r24, r1
 2e8:	1d c0       	rjmp	.+58     	; 0x324 <App+0x246>
				{
					if (PRE_C_LED!=Red)
 2ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ee:	82 30       	cpi	r24, 0x02	; 2
 2f0:	71 f0       	breq	.+28     	; 0x30e <App+0x230>
					{
						LED_on(PORT_B,Led_p_R);
 2f2:	62 e0       	ldi	r22, 0x02	; 2
 2f4:	82 e4       	ldi	r24, 0x42	; 66
 2f6:	0e 94 37 02 	call	0x46e	; 0x46e <LED_on>
						LED_BlinkD(PORT_A,Led_C_Y,PORT_B,Led_p_Y,500);
 2fa:	e1 2c       	mov	r14, r1
 2fc:	f1 2c       	mov	r15, r1
 2fe:	0a ef       	ldi	r16, 0xFA	; 250
 300:	13 e4       	ldi	r17, 0x43	; 67
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	42 e4       	ldi	r20, 0x42	; 66
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	81 e4       	ldi	r24, 0x41	; 65
 30a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LED_BlinkD>
					}
					PRE_C_LED=Yellow;
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					C_LED=Red;
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <C_LED>
					LED_on(PORT_A,Led_C_R);
 31a:	62 e0       	ldi	r22, 0x02	; 2
 31c:	81 e4       	ldi	r24, 0x41	; 65
 31e:	0e 94 37 02 	call	0x46e	; 0x46e <LED_on>
 322:	2c c0       	rjmp	.+88     	; 0x37c <App+0x29e>
				}
				else
				{
					LED_off(PORT_A , Led_C_G);
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	81 e4       	ldi	r24, 0x41	; 65
 328:	0e 94 41 02 	call	0x482	; 0x482 <LED_off>
					LED_off(PORT_A , Led_C_R);
 32c:	62 e0       	ldi	r22, 0x02	; 2
 32e:	81 e4       	ldi	r24, 0x41	; 65
 330:	0e 94 41 02 	call	0x482	; 0x482 <LED_off>
					for (count= 0 ; count < 5 ; count++)
 334:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <count+0x1>
 338:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <count>
 33c:	19 c0       	rjmp	.+50     	; 0x370 <App+0x292>
					{
						LED_Blink(PORT_A,Led_C_Y,500);
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	4a ef       	ldi	r20, 0xFA	; 250
 344:	53 e4       	ldi	r21, 0x43	; 67
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	81 e4       	ldi	r24, 0x41	; 65
 34a:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LED_Blink>
						
						if (!Mode)
 34e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Mode>
 352:	81 11       	cpse	r24, r1
 354:	04 c0       	rjmp	.+8      	; 0x35e <App+0x280>
						{
							PRE_C_LED=Yellow;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
							break;
 35c:	0f c0       	rjmp	.+30     	; 0x37c <App+0x29e>
				}
				else
				{
					LED_off(PORT_A , Led_C_G);
					LED_off(PORT_A , Led_C_R);
					for (count= 0 ; count < 5 ; count++)
 35e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <count>
 362:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <count+0x1>
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <count+0x1>
 36c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <count>
 370:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <count>
 374:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <count+0x1>
 378:	05 97       	sbiw	r24, 0x05	; 5
 37a:	08 f3       	brcs	.-62     	; 0x33e <App+0x260>
							PRE_C_LED=Yellow;
							break;
						}
					}
				}
				LED_off(PORT_A,Led_C_Y);
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	81 e4       	ldi	r24, 0x41	; 65
 380:	0e 94 41 02 	call	0x482	; 0x482 <LED_off>
				LED_off(PORT_B,Led_p_Y);
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	82 e4       	ldi	r24, 0x42	; 66
 388:	0e 94 41 02 	call	0x482	; 0x482 <LED_off>
				
				if(PRE_C_LED==Green)
 38c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 390:	81 11       	cpse	r24, r1
 392:	07 c0       	rjmp	.+14     	; 0x3a2 <App+0x2c4>
				{
					C_LED=Red;
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <C_LED>
					PRE_C_LED=Yellow;
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 3a0:	45 c0       	rjmp	.+138    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
				}
				else if(PRE_C_LED==Red)
 3a2:	82 30       	cpi	r24, 0x02	; 2
 3a4:	09 f0       	breq	.+2      	; 0x3a8 <App+0x2ca>
 3a6:	42 c0       	rjmp	.+132    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
				{
					C_LED=Green;
 3a8:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <C_LED>
					PRE_C_LED=Yellow;
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 3b2:	3c c0       	rjmp	.+120    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
				}
				break;
				//***************************************Red case****************************************/
				case Red:
				LED_off(PORT_A,Led_C_G);
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	81 e4       	ldi	r24, 0x41	; 65
 3b8:	0e 94 41 02 	call	0x482	; 0x482 <LED_off>
				LED_off(PORT_A,Led_C_Y);
 3bc:	61 e0       	ldi	r22, 0x01	; 1
 3be:	81 e4       	ldi	r24, 0x41	; 65
 3c0:	0e 94 41 02 	call	0x482	; 0x482 <LED_off>
				LED_on(PORT_A,Led_C_R);
 3c4:	62 e0       	ldi	r22, 0x02	; 2
 3c6:	81 e4       	ldi	r24, 0x41	; 65
 3c8:	0e 94 37 02 	call	0x46e	; 0x46e <LED_on>
				for(count= 0; count <5; count++)
 3cc:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <count+0x1>
 3d0:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <count>
 3d4:	13 c0       	rjmp	.+38     	; 0x3fc <App+0x31e>
				{
					Timer_delay(1000);
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	8a e7       	ldi	r24, 0x7A	; 122
 3dc:	94 e4       	ldi	r25, 0x44	; 68
 3de:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Timer_delay>
					if(!Mode)
 3e2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Mode>
 3e6:	88 23       	and	r24, r24
 3e8:	79 f0       	breq	.+30     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
				//***************************************Red case****************************************/
				case Red:
				LED_off(PORT_A,Led_C_G);
				LED_off(PORT_A,Led_C_Y);
				LED_on(PORT_A,Led_C_R);
				for(count= 0; count <5; count++)
 3ea:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <count>
 3ee:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <count+0x1>
 3f2:	01 96       	adiw	r24, 0x01	; 1
 3f4:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <count+0x1>
 3f8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <count>
 3fc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <count>
 400:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <count+0x1>
 404:	05 97       	sbiw	r24, 0x05	; 5
 406:	38 f3       	brcs	.-50     	; 0x3d6 <App+0x2f8>
				{
					Timer_delay(1000);
					if(!Mode)
					break;
				}
				PRE_C_LED=Red;
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				C_LED=Yellow;
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <C_LED>
				break;
 414:	0b c0       	rjmp	.+22     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
			default:
				C_LED=Red;
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <C_LED>
				PRE_C_LED=Yellow;
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
 422:	04 c0       	rjmp	.+8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
				
			}
	}
	else
	{
		test = 0;
 424:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 428:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	}
	
}
 42c:	1f 91       	pop	r17
 42e:	0f 91       	pop	r16
 430:	ff 90       	pop	r15
 432:	ef 90       	pop	r14
 434:	08 95       	ret

00000436 <__vector_1>:


//Interrupt
ISR(INTR_INT0)
{
 436:	1f 92       	push	r1
 438:	0f 92       	push	r0
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	0f 92       	push	r0
 43e:	11 24       	eor	r1, r1
	Mode=P_Mode;
 440:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Mode>
 444:	0f 90       	pop	r0
 446:	0f be       	out	0x3f, r0	; 63
 448:	0f 90       	pop	r0
 44a:	1f 90       	pop	r1
 44c:	18 95       	reti

0000044e <Button_init>:
 */ 
#include "Button.h"

uint16_t Button_init(uint8_t buttonport , uint8_t buttonpin)
{
	DIO_init(buttonport , buttonpin , IN);
 44e:	40 e0       	ldi	r20, 0x00	; 0
 450:	0e 94 b6 02 	call	0x56c	; 0x56c <DIO_init>
	return 1;
}
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	08 95       	ret

0000045a <LED_init>:
#include "../MCAL/Timer Driver/Timer.h"
uint32_t check;
// initialization of the led driver
uint32_t LED_init(uint8_t ledport , uint8_t ledpin)
{
	check=DIO_init(ledport,ledpin,OUT);
 45a:	41 e0       	ldi	r20, 0x01	; 1
 45c:	0e 94 b6 02 	call	0x56c	; 0x56c <DIO_init>
	if (check = 0)
 460:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <check+0x1>
 464:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <check>
	else
	{
		return 1;
	}

}
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	08 95       	ret

0000046e <LED_on>:

//Turn on the led
uint32_t LED_on(uint8_t ledport , uint8_t ledpin)
{
	check=DIO_Write(ledport,ledpin,High);
 46e:	41 e0       	ldi	r20, 0x01	; 1
 470:	0e 94 33 03 	call	0x666	; 0x666 <DIO_Write>
	if (check = 0)
 474:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <check+0x1>
 478:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <check>
	else
	{
		return 1;
	}
	
}
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	08 95       	ret

00000482 <LED_off>:
//Turn off the led
uint32_t LED_off(uint8_t ledport , uint8_t ledpin)
{
	check=DIO_Write(ledport,ledpin,Low);
 482:	40 e0       	ldi	r20, 0x00	; 0
 484:	0e 94 33 03 	call	0x666	; 0x666 <DIO_Write>
	if (check = 0)
 488:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <check+0x1>
 48c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <check>
	}
	else
	{
		return 1;
	}
}
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	08 95       	ret

00000496 <LED_toggle>:
//Toggle the led
uint32_t LED_toggle(uint8_t ledport , uint8_t ledpin)
{
	check=DIO_Toggle(ledport,ledpin);
 496:	0e 94 b0 03 	call	0x760	; 0x760 <DIO_Toggle>
	if (check = 0)
 49a:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <check+0x1>
 49e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <check>
	}
	else
	{
		return 1;
	}
}
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	08 95       	ret

000004a8 <LED_Blink>:
//Blinking function for one pin
uint32_t LED_Blink(uint8_t ledport , uint8_t ledpin , F_t Time)
{
 4a8:	cf 92       	push	r12
 4aa:	df 92       	push	r13
 4ac:	ef 92       	push	r14
 4ae:	ff 92       	push	r15
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	c8 2f       	mov	r28, r24
 4b6:	d6 2f       	mov	r29, r22
 4b8:	69 01       	movw	r12, r18
 4ba:	7a 01       	movw	r14, r20
		LED_on(ledport,ledpin);
 4bc:	0e 94 37 02 	call	0x46e	; 0x46e <LED_on>
		Timer_delay(Time);
 4c0:	c7 01       	movw	r24, r14
 4c2:	b6 01       	movw	r22, r12
 4c4:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Timer_delay>
		LED_off(ledport,ledpin);
 4c8:	6d 2f       	mov	r22, r29
 4ca:	8c 2f       	mov	r24, r28
 4cc:	0e 94 41 02 	call	0x482	; 0x482 <LED_off>
		Timer_delay(Time);
 4d0:	c7 01       	movw	r24, r14
 4d2:	b6 01       	movw	r22, r12
 4d4:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Timer_delay>
}
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	ff 90       	pop	r15
 4de:	ef 90       	pop	r14
 4e0:	df 90       	pop	r13
 4e2:	cf 90       	pop	r12
 4e4:	08 95       	ret

000004e6 <LED_BlinkD>:
//Blinking function for two pins
uint32_t LED_BlinkD(uint8_t ledport1 , uint8_t ledpin1 ,uint8_t ledport2 , uint8_t ledpin2 , F_t Time)
{
 4e6:	8f 92       	push	r8
 4e8:	9f 92       	push	r9
 4ea:	af 92       	push	r10
 4ec:	bf 92       	push	r11
 4ee:	cf 92       	push	r12
 4f0:	df 92       	push	r13
 4f2:	ef 92       	push	r14
 4f4:	ff 92       	push	r15
 4f6:	0f 93       	push	r16
 4f8:	1f 93       	push	r17
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	88 2e       	mov	r8, r24
 500:	96 2e       	mov	r9, r22
 502:	a4 2e       	mov	r10, r20
 504:	b2 2e       	mov	r11, r18
 506:	67 01       	movw	r12, r14
 508:	78 01       	movw	r14, r16
	for(uint32_t count = 0; count <5; count++)
 50a:	c0 e0       	ldi	r28, 0x00	; 0
 50c:	d0 e0       	ldi	r29, 0x00	; 0
 50e:	19 c0       	rjmp	.+50     	; 0x542 <LED_BlinkD+0x5c>
	{
	LED_on(ledport1,ledpin1);
 510:	69 2d       	mov	r22, r9
 512:	88 2d       	mov	r24, r8
 514:	0e 94 37 02 	call	0x46e	; 0x46e <LED_on>
	LED_on(ledport2,ledpin2);
 518:	6b 2d       	mov	r22, r11
 51a:	8a 2d       	mov	r24, r10
 51c:	0e 94 37 02 	call	0x46e	; 0x46e <LED_on>
	Timer_delay(Time);
 520:	c7 01       	movw	r24, r14
 522:	b6 01       	movw	r22, r12
 524:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Timer_delay>
	LED_off(ledport1,ledpin1);
 528:	69 2d       	mov	r22, r9
 52a:	88 2d       	mov	r24, r8
 52c:	0e 94 41 02 	call	0x482	; 0x482 <LED_off>
	LED_off(ledport2,ledpin2);
 530:	6b 2d       	mov	r22, r11
 532:	8a 2d       	mov	r24, r10
 534:	0e 94 41 02 	call	0x482	; 0x482 <LED_off>
	Timer_delay(Time);
 538:	c7 01       	movw	r24, r14
 53a:	b6 01       	movw	r22, r12
 53c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Timer_delay>
		Timer_delay(Time);
}
//Blinking function for two pins
uint32_t LED_BlinkD(uint8_t ledport1 , uint8_t ledpin1 ,uint8_t ledport2 , uint8_t ledpin2 , F_t Time)
{
	for(uint32_t count = 0; count <5; count++)
 540:	21 96       	adiw	r28, 0x01	; 1
 542:	c5 30       	cpi	r28, 0x05	; 5
 544:	d1 05       	cpc	r29, r1
 546:	20 f3       	brcs	.-56     	; 0x510 <LED_BlinkD+0x2a>
	Timer_delay(Time);
	LED_off(ledport1,ledpin1);
	LED_off(ledport2,ledpin2);
	Timer_delay(Time);
	}
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	1f 91       	pop	r17
 54e:	0f 91       	pop	r16
 550:	ff 90       	pop	r15
 552:	ef 90       	pop	r14
 554:	df 90       	pop	r13
 556:	cf 90       	pop	r12
 558:	bf 90       	pop	r11
 55a:	af 90       	pop	r10
 55c:	9f 90       	pop	r9
 55e:	8f 90       	pop	r8
 560:	08 95       	ret

00000562 <main>:
 */ 


int main(void)
{
	App_init();
 562:	0e 94 49 00 	call	0x92	; 0x92 <App_init>
	while (1)
	{
		App();
 566:	0e 94 6f 00 	call	0xde	; 0xde <App>
 56a:	fd cf       	rjmp	.-6      	; 0x566 <main+0x4>

0000056c <DIO_init>:
//Global variables.
//Function defifnitions

uint32_t DIO_init(uint8_t portnum , uint8_t pinnum , uint8_t direction)
{
	switch(portnum)
 56c:	82 34       	cpi	r24, 0x42	; 66
 56e:	31 f1       	breq	.+76     	; 0x5bc <DIO_init+0x50>
 570:	18 f4       	brcc	.+6      	; 0x578 <DIO_init+0xc>
 572:	81 34       	cpi	r24, 0x41	; 65
 574:	39 f0       	breq	.+14     	; 0x584 <DIO_init+0x18>
 576:	73 c0       	rjmp	.+230    	; 0x65e <DIO_init+0xf2>
 578:	83 34       	cpi	r24, 0x43	; 67
 57a:	e1 f1       	breq	.+120    	; 0x5f4 <DIO_init+0x88>
 57c:	84 34       	cpi	r24, 0x44	; 68
 57e:	09 f4       	brne	.+2      	; 0x582 <DIO_init+0x16>
 580:	54 c0       	rjmp	.+168    	; 0x62a <DIO_init+0xbe>
 582:	6d c0       	rjmp	.+218    	; 0x65e <DIO_init+0xf2>
	{
		case PORT_A:
		if (direction == IN)
 584:	41 11       	cpse	r20, r1
 586:	0c c0       	rjmp	.+24     	; 0x5a0 <DIO_init+0x34>
		{
			DDRA &= ~(1<<pinnum);
 588:	2a b3       	in	r18, 0x1a	; 26
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_init+0x28>
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	6a 95       	dec	r22
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_init+0x24>
 598:	80 95       	com	r24
 59a:	82 23       	and	r24, r18
 59c:	8a bb       	out	0x1a, r24	; 26
 59e:	5f c0       	rjmp	.+190    	; 0x65e <DIO_init+0xf2>
		}
		else if (direction == OUT)
 5a0:	41 30       	cpi	r20, 0x01	; 1
 5a2:	09 f0       	breq	.+2      	; 0x5a6 <DIO_init+0x3a>
 5a4:	5d c0       	rjmp	.+186    	; 0x660 <DIO_init+0xf4>
		{
			DDRA |=(1<<pinnum);
 5a6:	2a b3       	in	r18, 0x1a	; 26
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_init+0x46>
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	6a 95       	dec	r22
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_init+0x42>
 5b6:	82 2b       	or	r24, r18
 5b8:	8a bb       	out	0x1a, r24	; 26
 5ba:	51 c0       	rjmp	.+162    	; 0x65e <DIO_init+0xf2>
			// Error Handling.
			return 0;
		}
		break;
		case PORT_B:
		if (direction == IN)
 5bc:	41 11       	cpse	r20, r1
 5be:	0c c0       	rjmp	.+24     	; 0x5d8 <DIO_init+0x6c>
		{
			DDRB &= ~(1<<pinnum);
 5c0:	27 b3       	in	r18, 0x17	; 23
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_init+0x60>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	6a 95       	dec	r22
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_init+0x5c>
 5d0:	80 95       	com	r24
 5d2:	82 23       	and	r24, r18
 5d4:	87 bb       	out	0x17, r24	; 23
 5d6:	43 c0       	rjmp	.+134    	; 0x65e <DIO_init+0xf2>
		}
		else if (direction == OUT)
 5d8:	41 30       	cpi	r20, 0x01	; 1
 5da:	09 f0       	breq	.+2      	; 0x5de <DIO_init+0x72>
 5dc:	41 c0       	rjmp	.+130    	; 0x660 <DIO_init+0xf4>
		{
			DDRB |=(1<<pinnum);
 5de:	27 b3       	in	r18, 0x17	; 23
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <DIO_init+0x7e>
 5e6:	88 0f       	add	r24, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	6a 95       	dec	r22
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <DIO_init+0x7a>
 5ee:	82 2b       	or	r24, r18
 5f0:	87 bb       	out	0x17, r24	; 23
 5f2:	35 c0       	rjmp	.+106    	; 0x65e <DIO_init+0xf2>
			// Error Handling.
			return 0;
		}
		break;
		case PORT_C:
		if (direction == IN)
 5f4:	41 11       	cpse	r20, r1
 5f6:	0c c0       	rjmp	.+24     	; 0x610 <DIO_init+0xa4>
		{
			DDRC &= ~(1<<pinnum);
 5f8:	24 b3       	in	r18, 0x14	; 20
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <DIO_init+0x98>
 600:	88 0f       	add	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	6a 95       	dec	r22
 606:	e2 f7       	brpl	.-8      	; 0x600 <DIO_init+0x94>
 608:	80 95       	com	r24
 60a:	82 23       	and	r24, r18
 60c:	84 bb       	out	0x14, r24	; 20
 60e:	27 c0       	rjmp	.+78     	; 0x65e <DIO_init+0xf2>
		}
		else if (direction == OUT)
 610:	41 30       	cpi	r20, 0x01	; 1
 612:	31 f5       	brne	.+76     	; 0x660 <DIO_init+0xf4>
		{
			DDRC |=(1<<pinnum);
 614:	24 b3       	in	r18, 0x14	; 20
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	02 c0       	rjmp	.+4      	; 0x620 <DIO_init+0xb4>
 61c:	88 0f       	add	r24, r24
 61e:	99 1f       	adc	r25, r25
 620:	6a 95       	dec	r22
 622:	e2 f7       	brpl	.-8      	; 0x61c <DIO_init+0xb0>
 624:	82 2b       	or	r24, r18
 626:	84 bb       	out	0x14, r24	; 20
 628:	1a c0       	rjmp	.+52     	; 0x65e <DIO_init+0xf2>
			// Error Handling.
			return 0;
		}
		break;
		case PORT_D:
		if (direction == IN)
 62a:	41 11       	cpse	r20, r1
 62c:	0c c0       	rjmp	.+24     	; 0x646 <DIO_init+0xda>
		{
			DDRD &= ~(1<<pinnum);
 62e:	21 b3       	in	r18, 0x11	; 17
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	02 c0       	rjmp	.+4      	; 0x63a <DIO_init+0xce>
 636:	88 0f       	add	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	6a 95       	dec	r22
 63c:	e2 f7       	brpl	.-8      	; 0x636 <DIO_init+0xca>
 63e:	80 95       	com	r24
 640:	82 23       	and	r24, r18
 642:	81 bb       	out	0x11, r24	; 17
 644:	0c c0       	rjmp	.+24     	; 0x65e <DIO_init+0xf2>
		}
		else if (direction == OUT)
 646:	41 30       	cpi	r20, 0x01	; 1
 648:	59 f4       	brne	.+22     	; 0x660 <DIO_init+0xf4>
		{
			DDRD |=(1<<pinnum);
 64a:	21 b3       	in	r18, 0x11	; 17
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	02 c0       	rjmp	.+4      	; 0x656 <DIO_init+0xea>
 652:	88 0f       	add	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	6a 95       	dec	r22
 658:	e2 f7       	brpl	.-8      	; 0x652 <DIO_init+0xe6>
 65a:	82 2b       	or	r24, r18
 65c:	81 bb       	out	0x11, r24	; 17
			// Error Handling.
			return 0;
		}
		break;
	}
}
 65e:	08 95       	ret
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	08 95       	ret

00000666 <DIO_Write>:
uint32_t DIO_Write(uint8_t portnum , uint8_t pinnum , uint8_t value)
{
	switch(portnum)
 666:	82 34       	cpi	r24, 0x42	; 66
 668:	31 f1       	breq	.+76     	; 0x6b6 <DIO_Write+0x50>
 66a:	18 f4       	brcc	.+6      	; 0x672 <DIO_Write+0xc>
 66c:	81 34       	cpi	r24, 0x41	; 65
 66e:	39 f0       	breq	.+14     	; 0x67e <DIO_Write+0x18>
 670:	73 c0       	rjmp	.+230    	; 0x758 <DIO_Write+0xf2>
 672:	83 34       	cpi	r24, 0x43	; 67
 674:	e1 f1       	breq	.+120    	; 0x6ee <DIO_Write+0x88>
 676:	84 34       	cpi	r24, 0x44	; 68
 678:	09 f4       	brne	.+2      	; 0x67c <DIO_Write+0x16>
 67a:	54 c0       	rjmp	.+168    	; 0x724 <DIO_Write+0xbe>
 67c:	6d c0       	rjmp	.+218    	; 0x758 <DIO_Write+0xf2>
	{
		case PORT_A:
		if (value == Low)
 67e:	41 11       	cpse	r20, r1
 680:	0c c0       	rjmp	.+24     	; 0x69a <DIO_Write+0x34>
		{
			PORTA &= ~(1<<pinnum);
 682:	2b b3       	in	r18, 0x1b	; 27
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	02 c0       	rjmp	.+4      	; 0x68e <DIO_Write+0x28>
 68a:	88 0f       	add	r24, r24
 68c:	99 1f       	adc	r25, r25
 68e:	6a 95       	dec	r22
 690:	e2 f7       	brpl	.-8      	; 0x68a <DIO_Write+0x24>
 692:	80 95       	com	r24
 694:	82 23       	and	r24, r18
 696:	8b bb       	out	0x1b, r24	; 27
 698:	5f c0       	rjmp	.+190    	; 0x758 <DIO_Write+0xf2>
		}
		else if (value == High)
 69a:	41 30       	cpi	r20, 0x01	; 1
 69c:	09 f0       	breq	.+2      	; 0x6a0 <DIO_Write+0x3a>
 69e:	5d c0       	rjmp	.+186    	; 0x75a <DIO_Write+0xf4>
		{
			PORTA |=(1<<pinnum);
 6a0:	2b b3       	in	r18, 0x1b	; 27
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <DIO_Write+0x46>
 6a8:	88 0f       	add	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	6a 95       	dec	r22
 6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <DIO_Write+0x42>
 6b0:	82 2b       	or	r24, r18
 6b2:	8b bb       	out	0x1b, r24	; 27
 6b4:	51 c0       	rjmp	.+162    	; 0x758 <DIO_Write+0xf2>
			// Error Handling.
			return 0;
		}
		break;
		case PORT_B:
		if (value == Low)
 6b6:	41 11       	cpse	r20, r1
 6b8:	0c c0       	rjmp	.+24     	; 0x6d2 <DIO_Write+0x6c>
		{
			PORTB &= ~(1<<pinnum);
 6ba:	28 b3       	in	r18, 0x18	; 24
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <DIO_Write+0x60>
 6c2:	88 0f       	add	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	6a 95       	dec	r22
 6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <DIO_Write+0x5c>
 6ca:	80 95       	com	r24
 6cc:	82 23       	and	r24, r18
 6ce:	88 bb       	out	0x18, r24	; 24
 6d0:	43 c0       	rjmp	.+134    	; 0x758 <DIO_Write+0xf2>
		}
		else if (value == High)
 6d2:	41 30       	cpi	r20, 0x01	; 1
 6d4:	09 f0       	breq	.+2      	; 0x6d8 <DIO_Write+0x72>
 6d6:	41 c0       	rjmp	.+130    	; 0x75a <DIO_Write+0xf4>
		{
			PORTB |=(1<<pinnum);
 6d8:	28 b3       	in	r18, 0x18	; 24
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <DIO_Write+0x7e>
 6e0:	88 0f       	add	r24, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	6a 95       	dec	r22
 6e6:	e2 f7       	brpl	.-8      	; 0x6e0 <DIO_Write+0x7a>
 6e8:	82 2b       	or	r24, r18
 6ea:	88 bb       	out	0x18, r24	; 24
 6ec:	35 c0       	rjmp	.+106    	; 0x758 <DIO_Write+0xf2>
			// Error Handling.
			return 0;
		}
		break;
		case PORT_C:
		if (value == Low)
 6ee:	41 11       	cpse	r20, r1
 6f0:	0c c0       	rjmp	.+24     	; 0x70a <DIO_Write+0xa4>
		{
			PORTC &= ~(1<<pinnum);
 6f2:	25 b3       	in	r18, 0x15	; 21
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <DIO_Write+0x98>
 6fa:	88 0f       	add	r24, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	6a 95       	dec	r22
 700:	e2 f7       	brpl	.-8      	; 0x6fa <DIO_Write+0x94>
 702:	80 95       	com	r24
 704:	82 23       	and	r24, r18
 706:	85 bb       	out	0x15, r24	; 21
 708:	27 c0       	rjmp	.+78     	; 0x758 <DIO_Write+0xf2>
		}
		else if (value == High)
 70a:	41 30       	cpi	r20, 0x01	; 1
 70c:	31 f5       	brne	.+76     	; 0x75a <DIO_Write+0xf4>
		{
			PORTC |=(1<<pinnum);
 70e:	25 b3       	in	r18, 0x15	; 21
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	02 c0       	rjmp	.+4      	; 0x71a <DIO_Write+0xb4>
 716:	88 0f       	add	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	6a 95       	dec	r22
 71c:	e2 f7       	brpl	.-8      	; 0x716 <DIO_Write+0xb0>
 71e:	82 2b       	or	r24, r18
 720:	85 bb       	out	0x15, r24	; 21
 722:	1a c0       	rjmp	.+52     	; 0x758 <DIO_Write+0xf2>
			// Error Handling.
			return 0;
		}
		break;
		case PORT_D:
		if (value == Low)
 724:	41 11       	cpse	r20, r1
 726:	0c c0       	rjmp	.+24     	; 0x740 <DIO_Write+0xda>
		{
			PORTD &= ~(1<<pinnum);
 728:	22 b3       	in	r18, 0x12	; 18
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	02 c0       	rjmp	.+4      	; 0x734 <DIO_Write+0xce>
 730:	88 0f       	add	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	6a 95       	dec	r22
 736:	e2 f7       	brpl	.-8      	; 0x730 <DIO_Write+0xca>
 738:	80 95       	com	r24
 73a:	82 23       	and	r24, r18
 73c:	82 bb       	out	0x12, r24	; 18
 73e:	0c c0       	rjmp	.+24     	; 0x758 <DIO_Write+0xf2>
		}
		else if (value == High)
 740:	41 30       	cpi	r20, 0x01	; 1
 742:	59 f4       	brne	.+22     	; 0x75a <DIO_Write+0xf4>
		{
			PORTD |=(1<<pinnum);
 744:	22 b3       	in	r18, 0x12	; 18
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	02 c0       	rjmp	.+4      	; 0x750 <DIO_Write+0xea>
 74c:	88 0f       	add	r24, r24
 74e:	99 1f       	adc	r25, r25
 750:	6a 95       	dec	r22
 752:	e2 f7       	brpl	.-8      	; 0x74c <DIO_Write+0xe6>
 754:	82 2b       	or	r24, r18
 756:	82 bb       	out	0x12, r24	; 18
			// Error Handling.
			return 0;
		}
		break;
	}
}
 758:	08 95       	ret
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	08 95       	ret

00000760 <DIO_Toggle>:
uint32_t DIO_Toggle(uint8_t portnum , uint8_t pinnum )
{
	switch(portnum)
 760:	82 34       	cpi	r24, 0x42	; 66
 762:	a1 f0       	breq	.+40     	; 0x78c <DIO_Toggle+0x2c>
 764:	18 f4       	brcc	.+6      	; 0x76c <DIO_Toggle+0xc>
 766:	81 34       	cpi	r24, 0x41	; 65
 768:	31 f0       	breq	.+12     	; 0x776 <DIO_Toggle+0x16>
 76a:	31 c0       	rjmp	.+98     	; 0x7ce <DIO_Toggle+0x6e>
 76c:	83 34       	cpi	r24, 0x43	; 67
 76e:	c9 f0       	breq	.+50     	; 0x7a2 <DIO_Toggle+0x42>
 770:	84 34       	cpi	r24, 0x44	; 68
 772:	11 f1       	breq	.+68     	; 0x7b8 <DIO_Toggle+0x58>
 774:	2c c0       	rjmp	.+88     	; 0x7ce <DIO_Toggle+0x6e>
	{
		case PORT_A:
		PORTA ^=(1<<pinnum);
 776:	2b b3       	in	r18, 0x1b	; 27
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	02 c0       	rjmp	.+4      	; 0x782 <DIO_Toggle+0x22>
 77e:	88 0f       	add	r24, r24
 780:	99 1f       	adc	r25, r25
 782:	6a 95       	dec	r22
 784:	e2 f7       	brpl	.-8      	; 0x77e <DIO_Toggle+0x1e>
 786:	82 27       	eor	r24, r18
 788:	8b bb       	out	0x1b, r24	; 27
		break;
 78a:	24 c0       	rjmp	.+72     	; 0x7d4 <DIO_Toggle+0x74>
		
		case PORT_B:
		PORTB ^=(1<<pinnum);
 78c:	28 b3       	in	r18, 0x18	; 24
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	02 c0       	rjmp	.+4      	; 0x798 <DIO_Toggle+0x38>
 794:	88 0f       	add	r24, r24
 796:	99 1f       	adc	r25, r25
 798:	6a 95       	dec	r22
 79a:	e2 f7       	brpl	.-8      	; 0x794 <DIO_Toggle+0x34>
 79c:	82 27       	eor	r24, r18
 79e:	88 bb       	out	0x18, r24	; 24
		break;
 7a0:	19 c0       	rjmp	.+50     	; 0x7d4 <DIO_Toggle+0x74>
		
		case PORT_C:
		PORTC ^=(1<<pinnum);
 7a2:	25 b3       	in	r18, 0x15	; 21
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <DIO_Toggle+0x4e>
 7aa:	88 0f       	add	r24, r24
 7ac:	99 1f       	adc	r25, r25
 7ae:	6a 95       	dec	r22
 7b0:	e2 f7       	brpl	.-8      	; 0x7aa <DIO_Toggle+0x4a>
 7b2:	82 27       	eor	r24, r18
 7b4:	85 bb       	out	0x15, r24	; 21
		break;
 7b6:	0e c0       	rjmp	.+28     	; 0x7d4 <DIO_Toggle+0x74>
		
		case PORT_D:
		PORTD ^=(1<<pinnum);
 7b8:	22 b3       	in	r18, 0x12	; 18
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	02 c0       	rjmp	.+4      	; 0x7c4 <DIO_Toggle+0x64>
 7c0:	88 0f       	add	r24, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	6a 95       	dec	r22
 7c6:	e2 f7       	brpl	.-8      	; 0x7c0 <DIO_Toggle+0x60>
 7c8:	82 27       	eor	r24, r18
 7ca:	82 bb       	out	0x12, r24	; 18
		break;
 7cc:	03 c0       	rjmp	.+6      	; 0x7d4 <DIO_Toggle+0x74>
		default:
		// Error Handling.
		return 0;
 7ce:	80 e0       	ldi	r24, 0x00	; 0
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	08 95       	ret
	}
	
	
}
 7d4:	08 95       	ret

000007d6 <Timer_init>:
#include "../Timer Driver/Timer.h"
uint32_t overflowcounter = 0;
void Timer_init()
{
	//Chose Timer Mode.
	TCCR0 = 0x00; //Normal mode
 7d6:	13 be       	out	0x33, r1	; 51
	//Set timer initial value
	TCNT0 = 0x00;
 7d8:	12 be       	out	0x32, r1	; 50
 7da:	08 95       	ret

000007dc <Timer_delay>:
}
uint16_t Timer_delay(F_t Msec)
{
 7dc:	8f 92       	push	r8
 7de:	9f 92       	push	r9
 7e0:	af 92       	push	r10
 7e2:	bf 92       	push	r11
 7e4:	cf 92       	push	r12
 7e6:	df 92       	push	r13
 7e8:	ef 92       	push	r14
 7ea:	ff 92       	push	r15
 7ec:	6b 01       	movw	r12, r22
 7ee:	7c 01       	movw	r14, r24
	//Set timer initial value
	TCNT0 = 0x00;
 7f0:	12 be       	out	0x32, r1	; 50
	TCCR0 |= (1<<0); //no prescaler
 7f2:	83 b7       	in	r24, 0x33	; 51
 7f4:	81 60       	ori	r24, 0x01	; 1
 7f6:	83 bf       	out	0x33, r24	; 51
	uint16_t count = 1;
	//Start the timer-- Setting the clock source.
	while(overflowcounter < (Msec)/(.630))
 7f8:	0f c0       	rjmp	.+30     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	{
		//Stop after several overflows -- one overflow = 256 micro second
		//wait until set the overflow flag
		while((TIFR & (1<<0)) == 0); //busy wait
 7fa:	08 b6       	in	r0, 0x38	; 56
 7fc:	00 fe       	sbrs	r0, 0
 7fe:	fd cf       	rjmp	.-6      	; 0x7fa <Timer_delay+0x1e>
		//clear the overflow flag
		TIFR |=(1<<0);
 800:	88 b7       	in	r24, 0x38	; 56
 802:	81 60       	ori	r24, 0x01	; 1
 804:	88 bf       	out	0x38, r24	; 56
		overflowcounter++;
 806:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <overflowcounter>
 80a:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <overflowcounter+0x1>
 80e:	01 96       	adiw	r24, 0x01	; 1
 810:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <overflowcounter+0x1>
 814:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <overflowcounter>
	//Set timer initial value
	TCNT0 = 0x00;
	TCCR0 |= (1<<0); //no prescaler
	uint16_t count = 1;
	//Start the timer-- Setting the clock source.
	while(overflowcounter < (Msec)/(.630))
 818:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <overflowcounter>
 81c:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <overflowcounter+0x1>
 820:	80 e0       	ldi	r24, 0x00	; 0
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	0e 94 ad 04 	call	0x95a	; 0x95a <__floatunsisf>
 828:	4b 01       	movw	r8, r22
 82a:	5c 01       	movw	r10, r24
 82c:	2e ea       	ldi	r18, 0xAE	; 174
 82e:	37 e4       	ldi	r19, 0x47	; 71
 830:	41 e2       	ldi	r20, 0x21	; 33
 832:	5f e3       	ldi	r21, 0x3F	; 63
 834:	c7 01       	movw	r24, r14
 836:	b6 01       	movw	r22, r12
 838:	0e 94 3b 04 	call	0x876	; 0x876 <__divsf3>
 83c:	9b 01       	movw	r18, r22
 83e:	ac 01       	movw	r20, r24
 840:	c5 01       	movw	r24, r10
 842:	b4 01       	movw	r22, r8
 844:	0e 94 36 04 	call	0x86c	; 0x86c <__cmpsf2>
 848:	88 23       	and	r24, r24
 84a:	bc f2       	brlt	.-82     	; 0x7fa <Timer_delay+0x1e>
		while((TIFR & (1<<0)) == 0); //busy wait
		//clear the overflow flag
		TIFR |=(1<<0);
		overflowcounter++;
	}
	overflowcounter=0;
 84c:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <overflowcounter+0x1>
 850:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <overflowcounter>
	
	//Stop timer to count again from 0
	TCCR0 = 0x00;
 854:	13 be       	out	0x33, r1	; 51
	return count; 
}
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	ff 90       	pop	r15
 85c:	ef 90       	pop	r14
 85e:	df 90       	pop	r13
 860:	cf 90       	pop	r12
 862:	bf 90       	pop	r11
 864:	af 90       	pop	r10
 866:	9f 90       	pop	r9
 868:	8f 90       	pop	r8
 86a:	08 95       	ret

0000086c <__cmpsf2>:
 86c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__fp_cmp>
 870:	08 f4       	brcc	.+2      	; 0x874 <__cmpsf2+0x8>
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	08 95       	ret

00000876 <__divsf3>:
 876:	0e 94 4f 04 	call	0x89e	; 0x89e <__divsf3x>
 87a:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__fp_round>
 87e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__fp_pscB>
 882:	58 f0       	brcs	.+22     	; 0x89a <__divsf3+0x24>
 884:	0e 94 17 05 	call	0xa2e	; 0xa2e <__fp_pscA>
 888:	40 f0       	brcs	.+16     	; 0x89a <__divsf3+0x24>
 88a:	29 f4       	brne	.+10     	; 0x896 <__divsf3+0x20>
 88c:	5f 3f       	cpi	r21, 0xFF	; 255
 88e:	29 f0       	breq	.+10     	; 0x89a <__divsf3+0x24>
 890:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__fp_inf>
 894:	51 11       	cpse	r21, r1
 896:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__fp_szero>
 89a:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__fp_nan>

0000089e <__divsf3x>:
 89e:	0e 94 36 05 	call	0xa6c	; 0xa6c <__fp_split3>
 8a2:	68 f3       	brcs	.-38     	; 0x87e <__divsf3+0x8>

000008a4 <__divsf3_pse>:
 8a4:	99 23       	and	r25, r25
 8a6:	b1 f3       	breq	.-20     	; 0x894 <__divsf3+0x1e>
 8a8:	55 23       	and	r21, r21
 8aa:	91 f3       	breq	.-28     	; 0x890 <__divsf3+0x1a>
 8ac:	95 1b       	sub	r25, r21
 8ae:	55 0b       	sbc	r21, r21
 8b0:	bb 27       	eor	r27, r27
 8b2:	aa 27       	eor	r26, r26
 8b4:	62 17       	cp	r22, r18
 8b6:	73 07       	cpc	r23, r19
 8b8:	84 07       	cpc	r24, r20
 8ba:	38 f0       	brcs	.+14     	; 0x8ca <__divsf3_pse+0x26>
 8bc:	9f 5f       	subi	r25, 0xFF	; 255
 8be:	5f 4f       	sbci	r21, 0xFF	; 255
 8c0:	22 0f       	add	r18, r18
 8c2:	33 1f       	adc	r19, r19
 8c4:	44 1f       	adc	r20, r20
 8c6:	aa 1f       	adc	r26, r26
 8c8:	a9 f3       	breq	.-22     	; 0x8b4 <__divsf3_pse+0x10>
 8ca:	35 d0       	rcall	.+106    	; 0x936 <__divsf3_pse+0x92>
 8cc:	0e 2e       	mov	r0, r30
 8ce:	3a f0       	brmi	.+14     	; 0x8de <__divsf3_pse+0x3a>
 8d0:	e0 e8       	ldi	r30, 0x80	; 128
 8d2:	32 d0       	rcall	.+100    	; 0x938 <__divsf3_pse+0x94>
 8d4:	91 50       	subi	r25, 0x01	; 1
 8d6:	50 40       	sbci	r21, 0x00	; 0
 8d8:	e6 95       	lsr	r30
 8da:	00 1c       	adc	r0, r0
 8dc:	ca f7       	brpl	.-14     	; 0x8d0 <__divsf3_pse+0x2c>
 8de:	2b d0       	rcall	.+86     	; 0x936 <__divsf3_pse+0x92>
 8e0:	fe 2f       	mov	r31, r30
 8e2:	29 d0       	rcall	.+82     	; 0x936 <__divsf3_pse+0x92>
 8e4:	66 0f       	add	r22, r22
 8e6:	77 1f       	adc	r23, r23
 8e8:	88 1f       	adc	r24, r24
 8ea:	bb 1f       	adc	r27, r27
 8ec:	26 17       	cp	r18, r22
 8ee:	37 07       	cpc	r19, r23
 8f0:	48 07       	cpc	r20, r24
 8f2:	ab 07       	cpc	r26, r27
 8f4:	b0 e8       	ldi	r27, 0x80	; 128
 8f6:	09 f0       	breq	.+2      	; 0x8fa <__divsf3_pse+0x56>
 8f8:	bb 0b       	sbc	r27, r27
 8fa:	80 2d       	mov	r24, r0
 8fc:	bf 01       	movw	r22, r30
 8fe:	ff 27       	eor	r31, r31
 900:	93 58       	subi	r25, 0x83	; 131
 902:	5f 4f       	sbci	r21, 0xFF	; 255
 904:	3a f0       	brmi	.+14     	; 0x914 <__divsf3_pse+0x70>
 906:	9e 3f       	cpi	r25, 0xFE	; 254
 908:	51 05       	cpc	r21, r1
 90a:	78 f0       	brcs	.+30     	; 0x92a <__divsf3_pse+0x86>
 90c:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__fp_inf>
 910:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__fp_szero>
 914:	5f 3f       	cpi	r21, 0xFF	; 255
 916:	e4 f3       	brlt	.-8      	; 0x910 <__divsf3_pse+0x6c>
 918:	98 3e       	cpi	r25, 0xE8	; 232
 91a:	d4 f3       	brlt	.-12     	; 0x910 <__divsf3_pse+0x6c>
 91c:	86 95       	lsr	r24
 91e:	77 95       	ror	r23
 920:	67 95       	ror	r22
 922:	b7 95       	ror	r27
 924:	f7 95       	ror	r31
 926:	9f 5f       	subi	r25, 0xFF	; 255
 928:	c9 f7       	brne	.-14     	; 0x91c <__divsf3_pse+0x78>
 92a:	88 0f       	add	r24, r24
 92c:	91 1d       	adc	r25, r1
 92e:	96 95       	lsr	r25
 930:	87 95       	ror	r24
 932:	97 f9       	bld	r25, 7
 934:	08 95       	ret
 936:	e1 e0       	ldi	r30, 0x01	; 1
 938:	66 0f       	add	r22, r22
 93a:	77 1f       	adc	r23, r23
 93c:	88 1f       	adc	r24, r24
 93e:	bb 1f       	adc	r27, r27
 940:	62 17       	cp	r22, r18
 942:	73 07       	cpc	r23, r19
 944:	84 07       	cpc	r24, r20
 946:	ba 07       	cpc	r27, r26
 948:	20 f0       	brcs	.+8      	; 0x952 <__divsf3_pse+0xae>
 94a:	62 1b       	sub	r22, r18
 94c:	73 0b       	sbc	r23, r19
 94e:	84 0b       	sbc	r24, r20
 950:	ba 0b       	sbc	r27, r26
 952:	ee 1f       	adc	r30, r30
 954:	88 f7       	brcc	.-30     	; 0x938 <__divsf3_pse+0x94>
 956:	e0 95       	com	r30
 958:	08 95       	ret

0000095a <__floatunsisf>:
 95a:	e8 94       	clt
 95c:	09 c0       	rjmp	.+18     	; 0x970 <__floatsisf+0x12>

0000095e <__floatsisf>:
 95e:	97 fb       	bst	r25, 7
 960:	3e f4       	brtc	.+14     	; 0x970 <__floatsisf+0x12>
 962:	90 95       	com	r25
 964:	80 95       	com	r24
 966:	70 95       	com	r23
 968:	61 95       	neg	r22
 96a:	7f 4f       	sbci	r23, 0xFF	; 255
 96c:	8f 4f       	sbci	r24, 0xFF	; 255
 96e:	9f 4f       	sbci	r25, 0xFF	; 255
 970:	99 23       	and	r25, r25
 972:	a9 f0       	breq	.+42     	; 0x99e <__floatsisf+0x40>
 974:	f9 2f       	mov	r31, r25
 976:	96 e9       	ldi	r25, 0x96	; 150
 978:	bb 27       	eor	r27, r27
 97a:	93 95       	inc	r25
 97c:	f6 95       	lsr	r31
 97e:	87 95       	ror	r24
 980:	77 95       	ror	r23
 982:	67 95       	ror	r22
 984:	b7 95       	ror	r27
 986:	f1 11       	cpse	r31, r1
 988:	f8 cf       	rjmp	.-16     	; 0x97a <__floatsisf+0x1c>
 98a:	fa f4       	brpl	.+62     	; 0x9ca <__floatsisf+0x6c>
 98c:	bb 0f       	add	r27, r27
 98e:	11 f4       	brne	.+4      	; 0x994 <__floatsisf+0x36>
 990:	60 ff       	sbrs	r22, 0
 992:	1b c0       	rjmp	.+54     	; 0x9ca <__floatsisf+0x6c>
 994:	6f 5f       	subi	r22, 0xFF	; 255
 996:	7f 4f       	sbci	r23, 0xFF	; 255
 998:	8f 4f       	sbci	r24, 0xFF	; 255
 99a:	9f 4f       	sbci	r25, 0xFF	; 255
 99c:	16 c0       	rjmp	.+44     	; 0x9ca <__floatsisf+0x6c>
 99e:	88 23       	and	r24, r24
 9a0:	11 f0       	breq	.+4      	; 0x9a6 <__floatsisf+0x48>
 9a2:	96 e9       	ldi	r25, 0x96	; 150
 9a4:	11 c0       	rjmp	.+34     	; 0x9c8 <__floatsisf+0x6a>
 9a6:	77 23       	and	r23, r23
 9a8:	21 f0       	breq	.+8      	; 0x9b2 <__floatsisf+0x54>
 9aa:	9e e8       	ldi	r25, 0x8E	; 142
 9ac:	87 2f       	mov	r24, r23
 9ae:	76 2f       	mov	r23, r22
 9b0:	05 c0       	rjmp	.+10     	; 0x9bc <__floatsisf+0x5e>
 9b2:	66 23       	and	r22, r22
 9b4:	71 f0       	breq	.+28     	; 0x9d2 <__floatsisf+0x74>
 9b6:	96 e8       	ldi	r25, 0x86	; 134
 9b8:	86 2f       	mov	r24, r22
 9ba:	70 e0       	ldi	r23, 0x00	; 0
 9bc:	60 e0       	ldi	r22, 0x00	; 0
 9be:	2a f0       	brmi	.+10     	; 0x9ca <__floatsisf+0x6c>
 9c0:	9a 95       	dec	r25
 9c2:	66 0f       	add	r22, r22
 9c4:	77 1f       	adc	r23, r23
 9c6:	88 1f       	adc	r24, r24
 9c8:	da f7       	brpl	.-10     	; 0x9c0 <__floatsisf+0x62>
 9ca:	88 0f       	add	r24, r24
 9cc:	96 95       	lsr	r25
 9ce:	87 95       	ror	r24
 9d0:	97 f9       	bld	r25, 7
 9d2:	08 95       	ret

000009d4 <__fp_cmp>:
 9d4:	99 0f       	add	r25, r25
 9d6:	00 08       	sbc	r0, r0
 9d8:	55 0f       	add	r21, r21
 9da:	aa 0b       	sbc	r26, r26
 9dc:	e0 e8       	ldi	r30, 0x80	; 128
 9de:	fe ef       	ldi	r31, 0xFE	; 254
 9e0:	16 16       	cp	r1, r22
 9e2:	17 06       	cpc	r1, r23
 9e4:	e8 07       	cpc	r30, r24
 9e6:	f9 07       	cpc	r31, r25
 9e8:	c0 f0       	brcs	.+48     	; 0xa1a <__fp_cmp+0x46>
 9ea:	12 16       	cp	r1, r18
 9ec:	13 06       	cpc	r1, r19
 9ee:	e4 07       	cpc	r30, r20
 9f0:	f5 07       	cpc	r31, r21
 9f2:	98 f0       	brcs	.+38     	; 0xa1a <__fp_cmp+0x46>
 9f4:	62 1b       	sub	r22, r18
 9f6:	73 0b       	sbc	r23, r19
 9f8:	84 0b       	sbc	r24, r20
 9fa:	95 0b       	sbc	r25, r21
 9fc:	39 f4       	brne	.+14     	; 0xa0c <__fp_cmp+0x38>
 9fe:	0a 26       	eor	r0, r26
 a00:	61 f0       	breq	.+24     	; 0xa1a <__fp_cmp+0x46>
 a02:	23 2b       	or	r18, r19
 a04:	24 2b       	or	r18, r20
 a06:	25 2b       	or	r18, r21
 a08:	21 f4       	brne	.+8      	; 0xa12 <__fp_cmp+0x3e>
 a0a:	08 95       	ret
 a0c:	0a 26       	eor	r0, r26
 a0e:	09 f4       	brne	.+2      	; 0xa12 <__fp_cmp+0x3e>
 a10:	a1 40       	sbci	r26, 0x01	; 1
 a12:	a6 95       	lsr	r26
 a14:	8f ef       	ldi	r24, 0xFF	; 255
 a16:	81 1d       	adc	r24, r1
 a18:	81 1d       	adc	r24, r1
 a1a:	08 95       	ret

00000a1c <__fp_inf>:
 a1c:	97 f9       	bld	r25, 7
 a1e:	9f 67       	ori	r25, 0x7F	; 127
 a20:	80 e8       	ldi	r24, 0x80	; 128
 a22:	70 e0       	ldi	r23, 0x00	; 0
 a24:	60 e0       	ldi	r22, 0x00	; 0
 a26:	08 95       	ret

00000a28 <__fp_nan>:
 a28:	9f ef       	ldi	r25, 0xFF	; 255
 a2a:	80 ec       	ldi	r24, 0xC0	; 192
 a2c:	08 95       	ret

00000a2e <__fp_pscA>:
 a2e:	00 24       	eor	r0, r0
 a30:	0a 94       	dec	r0
 a32:	16 16       	cp	r1, r22
 a34:	17 06       	cpc	r1, r23
 a36:	18 06       	cpc	r1, r24
 a38:	09 06       	cpc	r0, r25
 a3a:	08 95       	ret

00000a3c <__fp_pscB>:
 a3c:	00 24       	eor	r0, r0
 a3e:	0a 94       	dec	r0
 a40:	12 16       	cp	r1, r18
 a42:	13 06       	cpc	r1, r19
 a44:	14 06       	cpc	r1, r20
 a46:	05 06       	cpc	r0, r21
 a48:	08 95       	ret

00000a4a <__fp_round>:
 a4a:	09 2e       	mov	r0, r25
 a4c:	03 94       	inc	r0
 a4e:	00 0c       	add	r0, r0
 a50:	11 f4       	brne	.+4      	; 0xa56 <__fp_round+0xc>
 a52:	88 23       	and	r24, r24
 a54:	52 f0       	brmi	.+20     	; 0xa6a <__fp_round+0x20>
 a56:	bb 0f       	add	r27, r27
 a58:	40 f4       	brcc	.+16     	; 0xa6a <__fp_round+0x20>
 a5a:	bf 2b       	or	r27, r31
 a5c:	11 f4       	brne	.+4      	; 0xa62 <__fp_round+0x18>
 a5e:	60 ff       	sbrs	r22, 0
 a60:	04 c0       	rjmp	.+8      	; 0xa6a <__fp_round+0x20>
 a62:	6f 5f       	subi	r22, 0xFF	; 255
 a64:	7f 4f       	sbci	r23, 0xFF	; 255
 a66:	8f 4f       	sbci	r24, 0xFF	; 255
 a68:	9f 4f       	sbci	r25, 0xFF	; 255
 a6a:	08 95       	ret

00000a6c <__fp_split3>:
 a6c:	57 fd       	sbrc	r21, 7
 a6e:	90 58       	subi	r25, 0x80	; 128
 a70:	44 0f       	add	r20, r20
 a72:	55 1f       	adc	r21, r21
 a74:	59 f0       	breq	.+22     	; 0xa8c <__fp_splitA+0x10>
 a76:	5f 3f       	cpi	r21, 0xFF	; 255
 a78:	71 f0       	breq	.+28     	; 0xa96 <__fp_splitA+0x1a>
 a7a:	47 95       	ror	r20

00000a7c <__fp_splitA>:
 a7c:	88 0f       	add	r24, r24
 a7e:	97 fb       	bst	r25, 7
 a80:	99 1f       	adc	r25, r25
 a82:	61 f0       	breq	.+24     	; 0xa9c <__fp_splitA+0x20>
 a84:	9f 3f       	cpi	r25, 0xFF	; 255
 a86:	79 f0       	breq	.+30     	; 0xaa6 <__fp_splitA+0x2a>
 a88:	87 95       	ror	r24
 a8a:	08 95       	ret
 a8c:	12 16       	cp	r1, r18
 a8e:	13 06       	cpc	r1, r19
 a90:	14 06       	cpc	r1, r20
 a92:	55 1f       	adc	r21, r21
 a94:	f2 cf       	rjmp	.-28     	; 0xa7a <__fp_split3+0xe>
 a96:	46 95       	lsr	r20
 a98:	f1 df       	rcall	.-30     	; 0xa7c <__fp_splitA>
 a9a:	08 c0       	rjmp	.+16     	; 0xaac <__fp_splitA+0x30>
 a9c:	16 16       	cp	r1, r22
 a9e:	17 06       	cpc	r1, r23
 aa0:	18 06       	cpc	r1, r24
 aa2:	99 1f       	adc	r25, r25
 aa4:	f1 cf       	rjmp	.-30     	; 0xa88 <__fp_splitA+0xc>
 aa6:	86 95       	lsr	r24
 aa8:	71 05       	cpc	r23, r1
 aaa:	61 05       	cpc	r22, r1
 aac:	08 94       	sec
 aae:	08 95       	ret

00000ab0 <__fp_zero>:
 ab0:	e8 94       	clt

00000ab2 <__fp_szero>:
 ab2:	bb 27       	eor	r27, r27
 ab4:	66 27       	eor	r22, r22
 ab6:	77 27       	eor	r23, r23
 ab8:	cb 01       	movw	r24, r22
 aba:	97 f9       	bld	r25, 7
 abc:	08 95       	ret

00000abe <_exit>:
 abe:	f8 94       	cli

00000ac0 <__stop_program>:
 ac0:	ff cf       	rjmp	.-2      	; 0xac0 <__stop_program>
